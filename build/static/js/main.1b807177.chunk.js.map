{"version":3,"sources":["Component/Maps.jsx","Component/Alert.jsx","Component/Charts.jsx","Component/Prediction.jsx","App.js","reportWebVitals.js","index.js"],"names":["Maps","props","WrappedMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","Latitude","lng","Longitude","style","width","height","googleMapURL","loadingElement","containerElement","mapElement","Alert","useState","alertInfo","setAlertInfo","alertDone","setAlertDone","longAndLat","setLongAndLat","useEffect","restaurant","index","allRestaurant","length","License","updateLongAndLat","className","Button","onClick","Form","onSubmit","e","preventDefault","axios","post","then","res","catch","error","console","log","handleSubmit","Row","Group","as","Col","controlId","value","fullName","onChange","target","Label","Control","type","placeholder","required","Text","address","restaurantName","readOnly","restaurantAddress","itemPurchased","dateOfPurchase","symptoms","variant","Charts","labels","dataGraph","data","datasets","label","backgroundColor","options","title","display","text","legend","scales","yAxes","ticks","min","max","stepSize","Prediction","setLabels","setDataGraph","loading","setLoading","get","response","getLabels","map","element","Inspection_Date","getRiskPred","Risk_pred","name","App","setData","setOptions","selected","setSelected","showAlert","setShowAlert","showPredict","setShowPredict","alertProps","setAlertProps","toTitleCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","fetch","json","d","forEach","DBA_Name","Address","addTabOption","selections","elem","sort","Swal","fire","handleSelected","caseSensitive","minLength","filter","find","rest","handleShowAlert","showAssessment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b807177.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { GoogleMap, withScriptjs, withGoogleMap } from \"react-google-maps\";\r\n\r\n\r\n\r\nexport default function Maps(props) {\r\n\r\n    const Map = () => {\r\n        return (\r\n            <GoogleMap\r\n                defaultZoom={12}\r\n                defaultCenter={{ lat: props.Latitude, lng: props.Longitude }}\r\n            />\r\n        );\r\n    }\r\n    \r\n    const WrappedMap = withScriptjs(withGoogleMap(Map));\r\n\r\n    return (\r\n        <div style = {{width: \"470px\", height: \"540px\"}}>\r\n            <WrappedMap\r\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places`}\r\n                loadingElement={<div style={{ height: '100%' }} />}\r\n                containerElement={<div style={{ height: '100%' }} />}\r\n                mapElement={<div style={{ height: '100%' }} />}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Col } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./Alert.css\"\r\nimport axios from \"axios\";\r\nimport Maps from \"./Maps\";\r\n\r\n\r\nexport default function Alert(props) {\r\n    const [alertInfo, setAlertInfo] = useState({});\r\n    const [alertDone, setAlertDone] = useState(false);\r\n    const [longAndLat, setLongAndLat] = useState({ Longitude: \"\", Latitude: \"\" });\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Make the request .\r\n\r\n        const res = axios.post(\"https://indigestion-prediction-backend.herokuapp.com/api/addAlert\", alertInfo)\r\n            .then(res => {\r\n                // Say to the user that his alert has been token\r\n                setAlertDone(true);\r\n            }).catch(function (error) {\r\n                // Say to the user that there is a problem\r\n            });\r\n        console.log(alertInfo);\r\n        setAlertDone(true);\r\n    }\r\n\r\n    const updateLongAndLat = () => {\r\n        for (let index = 0; index < props.allRestaurant.length; index++) {\r\n            if (props.allRestaurant[index].License == props.restaurant.License) {\r\n                const Longitude = props.allRestaurant[index].Longitude;\r\n                const Latitude = props.allRestaurant[index].Latitude;\r\n                setLongAndLat({ Longitude: Longitude, Latitude: Latitude });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleAnotherAlert = () => {\r\n        setAlertDone(false);\r\n    };\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n        setAlertInfo(props.restaurant);\r\n        updateLongAndLat();\r\n        // AIzaSyBllmc_jF_IqNOPUz9l7_BW87gRZ9IZMC4\r\n    }, []);\r\n\r\n \r\n\r\n\r\n    return (\r\n        <>\r\n            {alertDone &&\r\n                <div>\r\n                    <h3 className=\"pt-5 pb-5\">Your alert has been token. Thank you for your time</h3>\r\n                    <Button className=\"\" onClick={() => handleAnotherAlert()}>Create another alert ?</Button>\r\n                </div>\r\n            }\r\n            {!alertDone && <>\r\n                <h3 className=\"pt-5\">Create an Alert</h3>\r\n                <div className=\"myContainer  d-flex flex-row justify-content-around\">\r\n                    <div className className=\"form-container p-3\">\r\n                        <Form onSubmit={(e) => handleSubmit(e)}>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formBasicName\" value={alertInfo.fullName} onChange={(e) => setAlertInfo({ ...alertInfo, fullName: e.target.value })}>\r\n                                    <Form.Label className=\"float-left\">Full Name</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter email\" required />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n\r\n                                {/* <Form.Group as={Col} controlId=\"formBasicEmail\" value={alertInfo.email} onChange={(e) => setAlertInfo({ ...alertInfo, email: e.target.value })}>\r\n                                    <Form.Label className=\"float-left\">Email</Form.Label>\r\n                                    <Form.Control type=\"email\" placeholder=\"Password\" required />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group> */}\r\n                            </Form.Row>\r\n\r\n                            <Form.Group controlId=\"formBasicAdress\" value={alertInfo.address} onChange={(e) => setAlertInfo({ ...alertInfo, address: e.target.value })}>\r\n                                <Form.Label className=\"float-left\">Your Address</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter adress\" required />\r\n                                <Form.Text className=\"text-muted\"></Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formBasicRestaurantName\" >\r\n                                    <Form.Label className=\"float-left\" > Restaurant Name</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder={alertInfo.restaurantName} readOnly />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formBasicRestaurantAdress\" >\r\n                                    <Form.Label className=\"float-left\">Restaurant Address</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder={alertInfo.restaurantAddress} readOnly />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n\r\n\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formBasicItam\" value={alertInfo.itemPurchased} onChange={(e) => setAlertInfo({ ...alertInfo, itemPurchased: e.target.value })}>\r\n                                    <Form.Label className=\"float-left\">Item Purchased</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Item Purchased\" required />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formBasicDatePurchased\" value={alertInfo.dateOfPurchase} onChange={(e) => setAlertInfo({ ...alertInfo, dateOfPurchase: e.target.value })}>\r\n                                    <Form.Label className=\"float-left\">Date of Purchased</Form.Label>\r\n                                    <Form.Control type=\"date\" placeholder=\"Enter Date of Purchased Like that: MM/DD/YYYY \" required />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n\r\n                            </Form.Row>\r\n                            <Form.Group controlId=\"formBasicTimePurchased\" value={alertInfo.symptoms} onChange={(e) => setAlertInfo({ ...alertInfo, symptoms: e.target.value })}>\r\n                                <Form.Label className=\"float-left\">Symptoms </Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter the symptoms\" required />\r\n                                <Form.Text className=\"text-muted\"></Form.Text>\r\n                            </Form.Group>\r\n                            <Button className=\"float-left\" variant=\"primary\" type=\"submit\">\r\n                                Submit\r\n                    </Button>\r\n                        </Form>\r\n                    </div>\r\n                    <div className=\"mx-3\">\r\n                        <Maps Latitude = {longAndLat.Latitude} Longitude = {longAndLat.Longitude}/>\r\n                    </div>\r\n                </div>\r\n            </>}\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nfunction Charts(props) {\r\n    const [labels, setLabels] = useState(props.labels);\r\n    const [dataGraph, setdataGraph] = useState(props.dataGraph);\r\n    // const createDataGraph = () => {\r\n    //     let risk = props.riskPrediction;\r\n    //     if (risk<2) {\r\n    //         risk = (risk-1)*100;\r\n    //         setdataGraph([risk, 100-risk, 0]);\r\n    //     }else if(risk < 3){\r\n    //         risk = (risk-2)*100;\r\n    //         setdataGraph([0, risk, 100-risk]);\r\n    //     }else{\r\n    //         setdataGraph([0, 0, 100]);\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        console.log(props.dataGraph);\r\n    }, [])\r\n    // useEffect(() => {\r\n    //     console.log(props);\r\n    //     setInterval(() => {\r\n    //         console.log(props)\r\n    //         setLabels(props)\r\n    //     }, 500);\r\n        \r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     if(labels !=[] ){\r\n    //         clearInterval();\r\n    //     }\r\n    // }, [labels])\r\n    return (\r\n\r\n        <div className=\"mx-4 mt-3\">\r\n            <Bar\r\n                data={{\r\n                    labels: labels,\r\n                    datasets: [{\r\n                        label: 'Inspections',\r\n                        backgroundColor: [\r\n                            'rgba(17, 171, 17, 0.2)',\r\n                            'rgba(245, 193, 22, 0.2)',\r\n                            'rgba(226, 19, 19, 0.2)',\r\n                            'rgba(124, 32, 86, 0.2)',\r\n                            'rgba(150, 32, 06, 0.2)',\r\n                            'rgba(86, 15, 10, 0.2)',\r\n                            'rgba(17, 171, 17, 0.2)',\r\n                            'rgba(245, 193, 22, 0.2)',\r\n                            'rgba(226, 19, 19, 0.2)',\r\n                            'rgba(124, 32, 86, 0.2)',\r\n                            'rgba(150, 32, 06, 0.2)',\r\n                            'rgba(86, 15, 10, 0.2)',\r\n                            'rgba(17, 171, 17, 0.2)',\r\n                            'rgba(245, 193, 22, 0.2)',\r\n                            'rgba(226, 19, 19, 0.2)',\r\n                            'rgba(124, 32, 86, 0.2)',\r\n                            'rgba(150, 32, 06, 0.2)',\r\n                            'rgba(86, 15, 10, 0.2)'\r\n                        ],\r\n                        data: dataGraph\r\n                    }]\r\n                }}\r\n                height={300}\r\n\r\n                options={{\r\n                    title: {\r\n                        display:true,\r\n                        text: 'Gravity',\r\n                        // fontsize: \"\"\r\n                    },\r\n                    legend: {\r\n                        display:false,\r\n                    },\r\n                    scales: {\r\n                        yAxes:[\r\n                            {\r\n                                ticks: {\r\n                                    min:0,\r\n                                    max: 3,\r\n                                    stepSize:0.5,\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default Charts","import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Col } from \"react-bootstrap\";\r\nimport \"./Prediction.css\";\r\nimport Charts from \"./Charts\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Prediction(props) {\r\n    const [dataInspection, setDataInspection] = useState([]);\r\n    const [labels, setLabels] = useState([]);\r\n    const [dataGraph, setDataGraph] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        axios.get(`https://indigestion-prediction-backend.herokuapp.com/api/inspections/${props.restaurant.License}`)\r\n            .then(function (response) {\r\n                // handle success\r\n                // console.log(response.data);\r\n                const getLabels = response.data.map(element => {\r\n                    return element.Inspection_Date;\r\n                })\r\n                // console.log(getLabels)\r\n                setLabels(getLabels);\r\n                const getRiskPred = response.data.map(element => {\r\n                    return element.Risk_pred;\r\n                })\r\n                // console.log(getRiskPred);\r\n                setDataGraph(getRiskPred);\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            setLoading(true);\r\n    }, [props])\r\n\r\n    return (\r\n      <>\r\n        {loading && (\r\n          <div className=\"pt-5 mx-3\">\r\n            {console.log(labels)}\r\n            {console.log(dataGraph)}\r\n            <h3 className=\"mb-5 text-center\">\r\n                        Please read the information below about the restaurant\r\n            </h3>\r\n                    {labels.length && dataGraph.length && \r\n                        <div className=\"container-prediction d-flex flex-row align-items-center justify-content-around\">\r\n              <div className=\"history-restaurant\">\r\n                <Form.Row className=\"mt-4 mx-3\">\r\n                  <Form.Group as={Col}>\r\n                    <Form.Label className=\"ml-2 float-left\">\r\n                      Restaurant Name\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className=\"text-info\"\r\n                      value={props.restaurant.restaurantName}\r\n                      name=\"\"\r\n                      type=\"text\"\r\n                      placeholder=\"\"\r\n                    />\r\n                  </Form.Group>\r\n                  </Form.Row>\r\n                  <Form.Row className=\"mt-4 mx-3\">\r\n                  <Form.Group as={Col}>\r\n                    <Form.Label className=\"ml-2 float-left\">\r\n                      Licence number\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className=\"text-info\"\r\n                      value={props.restaurant.License}\r\n                      name=\"\"\r\n                      type=\"text\"\r\n                      placeholder=\"\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col}>\r\n                    <Form.Label className=\"ml-2 float-left\">\r\n                      number Of inspections\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className=\"text-info\"\r\n                      value={labels.length}\r\n                      name=\"\"\r\n                      type=\"text\"\r\n                      placeholder=\"\"\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row className=\"mx-3\">\r\n                  \r\n                  <Form.Group as={Col}>\r\n                    <Form.Label className=\"ml-2 float-left\">\r\n                      first inspection\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className=\"text-info\"\r\n                      value={labels[0]}\r\n                      name=\"\"\r\n                      type=\"text\"\r\n                      placeholder=\"\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col}>\r\n                    <Form.Label className=\"ml-2 float-left\">\r\n                      last inspection\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className=\"text-info\"\r\n                      value={labels[labels.length - 1]}\r\n                      name=\"\"\r\n                      type=\"text\"\r\n                      placeholder=\"\"\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n                        </div>\r\n              <div className = \"dougnut\">\r\n                {console.log(labels)}\r\n                {console.log(dataGraph)}\r\n                {labels.length && dataGraph.length && (\r\n                    <Charts labels={labels} dataGraph={dataGraph} />\r\n                    )}\r\n              </div>\r\n            </div>\r\n                }\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n}\r\n","import { Combobox } from 'react-widgets';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport './App.css';\r\nimport { useEffect, useState } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport Sample from './lib/sample.json';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport  Alert  from './Component/Alert';\r\nimport Prediction from \"./Component/Prediction\";\r\nlet Api_Url = 'https://indigestion-prediction-backend.herokuapp.com/api/restaurants/'\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [options, setOptions] = useState([]);\r\n  const [selected, setSelected] = useState('');\r\n  const [showAlert, setShowAlert] = useState(false)\r\n  const [showPredict, setShowPredict] = useState(false)\r\n  const [alertProps, setAlertProps] = useState({})\r\n\r\n   function toTitleCase(str) {\r\n     return str.replace(/\\w\\S*/g, function (txt) {\r\n       return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n     });\r\n   }\r\n\r\n  const addTabOption = (data) => { \r\n    data.forEach(element => {\r\n      element.text = `${toTitleCase(element.DBA_Name)} at ${toTitleCase(\r\n        element.Address\r\n      )}`;\r\n    });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    fetch(`${Api_Url}`)\r\n      .then(res => res.json())\r\n      .then(d => {\r\n        addTabOption(d)\r\n        setData(d)\r\n        let selections = d.map(elem => elem.text)\r\n        selections.sort()\r\n        setOptions(selections);\r\n      })\r\n      .catch(e => {\r\n        Swal.fire('Trouble connecting to server')\r\n      }  )\r\n  }, []);\r\n\r\n  const handleSelected = (e) => {\r\n    setSelected(e)\r\n    setShowAlert(false);\r\n    setShowPredict(false);\r\n\r\n  }\r\n  \r\n  const showAssessment = () => {\r\n    setShowAlert(false);\r\n    \r\n    try {\r\n      const restaurant = data.find(elem => elem.text === selected)\r\n     let rest = { restaurantName: restaurant.DBA_Name, restaurantAddress: restaurant.Address, License: restaurant.License };\r\n     setAlertProps(rest)\r\n     setShowPredict(true)\r\n    } catch {\r\n      return\r\n     }\r\n    \r\n  }\r\n\r\n  const handleShowAlert = () => {\r\n      setShowPredict(false);\r\n\r\n      try {\r\n        const restaurant = data.find((elem) => elem.text === selected);\r\n        let rest = {\r\n          restaurantName: restaurant.DBA_Name,\r\n          restaurantAddress: restaurant.Address,\r\n          License: restaurant.License\r\n        };\r\n        setAlertProps(rest);\r\n        setShowAlert(true);\r\n      } catch {\r\n        return;\r\n      }\r\n    };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"top px-3 py-3 rounded\">\r\n        <h2>Welcome to Indigestion Alert</h2>\r\n        <hr />\r\n        To report a problem or see our predicted rating, please select a\r\n        restaurant:\r\n        <div className=\"selector   my-3\">\r\n          <Combobox\r\n            data={options}\r\n            onChange={(e) => handleSelected(e)}\r\n            caseSensitive={false}\r\n            minLength={3}\r\n            filter=\"contains\"\r\n          />\r\n        </div>{' '}\r\n        {selected !== '' && (\r\n          \r\n          <p className=\"btns mt-2\">\r\n            <Button\r\n              className=\"mr-5 font-weight-bold btn\"\r\n              variant=\"danger\"\r\n              onClick={() => handleShowAlert()}\r\n            >\r\n              Report a potential problem\r\n            </Button>\r\n            <Button\r\n              className=\"ml-5 font-weight-bold btn\"\r\n              variant=\"secondary\"\r\n              onClick={() => showAssessment()}\r\n            >\r\n              See our assessment\r\n            </Button>\r\n          </p>\r\n        )}\r\n      </div>\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          {showPredict && <Prediction restaurant={alertProps} />}\r\n          {showAlert && <Alert restaurant={alertProps} allRestaurant = {data}/>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}