[{"C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\App.js":"1","C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\index.js":"3","C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\Component\\Alert.jsx":"4","C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\Component\\Charts.jsx":"5","C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\Component\\Prediction.jsx":"6"},{"size":3697,"mtime":1611170099612,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1606206101699,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1606206101699,"results":"10","hashOfConfig":"8"},{"size":6200,"mtime":1611169399314,"results":"11","hashOfConfig":"8"},{"size":1788,"mtime":1611163780834,"results":"12","hashOfConfig":"8"},{"size":4795,"mtime":1611169887400,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1ti4kq4",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\App.js",["29","30"],"import { Combobox } from 'react-widgets';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Swal from 'sweetalert2';\nimport Sample from './lib/sample.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'react-bootstrap';\nimport  Alert  from './Component/Alert';\nimport Prediction from \"./Component/Prediction\";\nlet Api_Url = 'https://indigestion-prediction-backend.herokuapp.com/api/restaurants/'\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [selected, setSelected] = useState('');\n  const [showAlert, setShowAlert] = useState(false)\n  const [showPredict, setShowPredict] = useState(false)\n  const [alertProps, setAlertProps] = useState({})\n\n   function toTitleCase(str) {\n     return str.replace(/\\w\\S*/g, function (txt) {\n       return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n     });\n   }\n\n  const addTabOption = (data) => { \n    data.forEach(element => {\n      element.text = `${toTitleCase(element.DBA_Name)} at ${toTitleCase(\n        element.Address\n      )}`;\n    });\n  };\n  \n  useEffect(() => {\n    fetch(`${Api_Url}`)\n      .then(res => res.json())\n      .then(d => {\n        addTabOption(d)\n        setData(d)\n        let selections = d.map(elem => elem.text)\n        selections.sort()\n        setOptions(selections);\n      })\n      .catch(e => {\n        Swal.fire('Trouble connecting to server')\n      }  )\n  }, []);\n\n  const handleSelected = (e) => {\n    setSelected(e)\n    setShowAlert(false);\n    setShowPredict(false);\n\n  }\n  \n  const showAssessment = () => {\n    setShowAlert(false);\n    \n    try {\n      const restaurant = data.find(elem => elem.text === selected)\n     let rest = { restaurantName: restaurant.DBA_Name, restaurantAddress: restaurant.Address, License: restaurant.License };\n     setAlertProps(rest)\n     setShowPredict(true)\n    } catch {\n      return\n     }\n    \n  }\n\n  const handleShowAlert = () => {\n      setShowPredict(false);\n\n      try {\n        const restaurant = data.find((elem) => elem.text === selected);\n        let rest = {\n          restaurantName: restaurant.DBA_Name,\n          restaurantAddress: restaurant.Address,\n          License: restaurant.License\n        };\n        setAlertProps(rest);\n        setShowAlert(true);\n      } catch {\n        return;\n      }\n    };\n\n  return (\n    <div>\n      <div className=\"top px-3 py-3 rounded\">\n        <h2>Welcome to Indigestion Alert</h2>\n        <hr />\n        To report a problem or see our predicted rating, please select a\n        restaurant:\n        <div className=\"selector   my-3\">\n          <Combobox\n            data={options}\n            onChange={(e) => handleSelected(e)}\n            caseSensitive={false}\n            minLength={3}\n            filter=\"contains\"\n          />\n        </div>{' '}\n        {selected !== '' && (\n          <p className=\"btns mt-2\">\n            <Button\n              className=\"mr-5 font-weight-bold btn\"\n              variant=\"danger\"\n              onClick={() => handleShowAlert()}\n            >\n              Report a potential problem\n            </Button>\n            <Button\n              className=\"ml-5 font-weight-bold btn\"\n              variant=\"secondary\"\n              onClick={() => showAssessment()}\n            >\n              See our assessment\n            </Button>\n          </p>\n        )}\n      </div>\n      <div className=\"App\">\n        <div className=\"container\">\n          {showPredict && <Prediction restaurant={alertProps} />}\n          {showAlert && <Alert restaurant={alertProps} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\index.js",[],"C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\Component\\Alert.jsx",["31","32"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Col } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./Alert.css\"\r\n\r\n\r\nexport default function Alert(props) {\r\n    const [alertInfo, setAlertInfo] = useState({});\r\n    const [alertDone, setAlertDone] = useState(false);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Make the request .\r\n\r\n        // const res = await axios.post(\"http://localhost:8000/users\", { alertInfo })\r\n        //     .then(res => {\r\n        //         // Say to the user that his alert has been token\r\n        //         setAlertDone(true);\r\n        //     }).catch(function (error) {\r\n        //         // Say to the user that there is a problem\r\n        //     });\r\n        console.log(alertInfo);\r\n        setAlertDone(true);\r\n    }\r\n\r\n    const handleAnotherAlert = () => {\r\n      setAlertDone(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAlertInfo(props.restaurant);\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {alertDone &&\r\n                <div>\r\n                    <h3 className=\"pt-5 pb-5\">Your alert has been token. Thank you for your time</h3>\r\n                    <Button className=\"\" onClick={() => handleAnotherAlert()}>Create another alert ?</Button>\r\n                </div>\r\n            }\r\n            {!alertDone && <>\r\n                <h3 className=\"pt-5\">Create an Alert</h3>\r\n                <div className=\"myContainer  d-flex flex-row\">\r\n                    <div className className=\"form-container p-3\">\r\n                        <Form onSubmit={(e) => handleSubmit(e)}>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formBasicName\" value={alertInfo.fullName} onChange={(e) => setAlertInfo({ ...alertInfo, fullName: e.target.value })}>\r\n                                    <Form.Label className=\"float-left\">Full Name</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter email\" required />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Col} controlId=\"formBasicEmail\" value={alertInfo.email} onChange={(e) => setAlertInfo({ ...alertInfo, email: e.target.value })}>\r\n                                    <Form.Label className=\"float-left\">Email</Form.Label>\r\n                                    <Form.Control type=\"email\" placeholder=\"Password\" required />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n\r\n                            <Form.Group controlId=\"formBasicAdress\" value={alertInfo.address} onChange={(e) => setAlertInfo({ ...alertInfo, address: e.target.value })}>\r\n                                <Form.Label className=\"float-left\">Your Address</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter adress\" required />\r\n                                <Form.Text className=\"text-muted\"></Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formBasicRestaurantName\" >\r\n                                    <Form.Label className=\"float-left\" > Restaurant Name</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder={alertInfo.restaurantName} readOnly />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formBasicRestaurantAdress\" >\r\n                                    <Form.Label className=\"float-left\">Restaurant Address</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder={alertInfo.restaurantAddress} readOnly />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n\r\n\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formBasicItam\" value={alertInfo.itemPurchased} onChange={(e) => setAlertInfo({ ...alertInfo, itemPurchased: e.target.value })}>\r\n                                    <Form.Label className=\"float-left\">Item Purchased</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Item Purchased\" required />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formBasicDatePurchased\" value={alertInfo.dateOfPurchase} onChange={(e) => setAlertInfo({ ...alertInfo, dateOfPurchase: e.target.value })}>\r\n                                    <Form.Label className=\"float-left\">Date of Purchased</Form.Label>\r\n                                    <Form.Control type=\"date\" placeholder=\"Enter Date of Purchased Like that: MM/DD/YYYY \" required />\r\n                                    <Form.Text className=\"text-muted\"></Form.Text>\r\n                                </Form.Group>\r\n\r\n                            </Form.Row>\r\n                            <Form.Group controlId=\"formBasicTimePurchased\" value={alertInfo.symptoms} onChange={(e) => setAlertInfo({ ...alertInfo, symptoms: e.target.value })}>\r\n                                <Form.Label className=\"float-left\">Symptoms </Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter the symptoms\" required />\r\n                                <Form.Text className=\"text-muted\"></Form.Text>\r\n                            </Form.Group>\r\n                            <Button className=\"float-left\" variant=\"primary\" type=\"submit\">\r\n                                Submit\r\n                    </Button>\r\n                        </Form>\r\n                    </div>\r\n                    <div></div>\r\n                </div>\r\n            </>}\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n","C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\Component\\Charts.jsx",["33","34","35"],"import React, { useState, useEffect } from \"react\"\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nfunction Charts(props) {\r\n    const [labels, setLabels] = useState(props.labels);\r\n    const [dataGraph, setdataGraph] = useState(props.dataGraph);\r\n    // const createDataGraph = () => {\r\n    //     let risk = props.riskPrediction;\r\n    //     if (risk<2) {\r\n    //         risk = (risk-1)*100;\r\n    //         setdataGraph([risk, 100-risk, 0]);\r\n    //     }else if(risk < 3){\r\n    //         risk = (risk-2)*100;\r\n    //         setdataGraph([0, risk, 100-risk]);\r\n    //     }else{\r\n    //         setdataGraph([0, 0, 100]);\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        console.log(props.dataGraph);\r\n    }, [])\r\n    // useEffect(() => {\r\n    //     console.log(props);\r\n    //     setInterval(() => {\r\n    //         console.log(props)\r\n    //         setLabels(props)\r\n    //     }, 500);\r\n        \r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     if(labels !=[] ){\r\n    //         clearInterval();\r\n    //     }\r\n    // }, [labels])\r\n    return (\r\n\r\n        <div className=\"mx-4 mt-3\">\r\n            <Bar\r\n                data={{\r\n                    labels: labels,\r\n                    datasets: [{\r\n                        label: 'My First dataset',\r\n                        backgroundColor: [\r\n                            'rgba(17, 171, 17, 0.2)',\r\n                            'rgba(245, 193, 22, 0.2)',\r\n                            'rgba(226, 19, 19, 0.2)'\r\n                        ],\r\n                        data: dataGraph\r\n                    }]\r\n                }}\r\n                height={300}\r\n\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default Charts","C:\\Users\\betos\\Desktop\\hackathonITC\\frontend\\src\\Component\\Prediction.jsx",["36","37","38"],{"ruleId":"39","severity":1,"message":"40","line":6,"column":8,"nodeType":"41","messageId":"42","endLine":6,"endColumn":14},{"ruleId":"43","severity":1,"message":"44","line":48,"column":6,"nodeType":"45","endLine":48,"endColumn":8,"suggestions":"46"},{"ruleId":"43","severity":1,"message":"47","line":33,"column":8,"nodeType":"45","endLine":33,"endColumn":10,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":49,"column":36,"nodeType":"51","endLine":49,"endColumn":66},{"ruleId":"39","severity":1,"message":"52","line":5,"column":20,"nodeType":"41","messageId":"42","endLine":5,"endColumn":29},{"ruleId":"39","severity":1,"message":"53","line":6,"column":23,"nodeType":"41","messageId":"42","endLine":6,"endColumn":35},{"ruleId":"43","severity":1,"message":"54","line":22,"column":8,"nodeType":"45","endLine":22,"endColumn":10,"suggestions":"55"},{"ruleId":"39","severity":1,"message":"56","line":2,"column":16,"nodeType":"41","messageId":"42","endLine":2,"endColumn":22},{"ruleId":"39","severity":1,"message":"57","line":8,"column":12,"nodeType":"41","messageId":"42","endLine":8,"endColumn":26},{"ruleId":"39","severity":1,"message":"58","line":8,"column":28,"nodeType":"41","messageId":"42","endLine":8,"endColumn":45},"no-unused-vars","'Sample' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'addTabOption'. Either include it or remove the dependency array.","ArrayExpression",["59"],"React Hook useEffect has a missing dependency: 'props.restaurant'. Either include it or remove the dependency array. If 'setAlertInfo' needs the current value of 'props.restaurant', you can also switch to useReducer instead of useState and read 'props.restaurant' in the reducer.",["60"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setLabels' is assigned a value but never used.","'setdataGraph' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.dataGraph'. Either include it or remove the dependency array.",["61"],"'Button' is defined but never used.","'dataInspection' is assigned a value but never used.","'setDataInspection' is assigned a value but never used.",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [addTabOption]",{"range":"68","text":"69"},"Update the dependencies array to be: [props.restaurant]",{"range":"70","text":"71"},"Update the dependencies array to be: [props.dataGraph]",{"range":"72","text":"73"},[1507,1509],"[addTabOption]",[1004,1006],"[props.restaurant]",[719,721],"[props.dataGraph]"]